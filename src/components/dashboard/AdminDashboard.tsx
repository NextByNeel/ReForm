import React, { useState } from 'react';
import { DashboardView } from './Dashboard';
import { Users, Package, TrendingUp, AlertTriangle, Building, Truck, ShoppingCart, BarChart3, Settings, Plus, Edit, Eye, FileText, DollarSign, Calendar, CheckCircle, Star, Award, X, Search, Filter, Upload, Download } from 'lucide-react';
import { useOrders } from '../../contexts/OrderContext';
import { useProducts } from '../../contexts/ProductContext';
import { useSharedData } from '../../contexts/SharedDataContext';
import { downloadFile, formatCurrency, formatDate } from '../../utils/downloadUtils';
import { Product } from '../../types';

interface AdminDashboardProps {
  currentView: DashboardView;
}

export function AdminDashboard({ currentView }: AdminDashboardProps) {
  const { getAllOrders, updateOrderStatus } = useOrders();
  const { products, addProduct, updateProduct, deleteProduct } = useProducts();
  const { 
    mitras, 
    collections, 
    businesses, 
    systemMetrics, 
    wasteContributions,
    systemUsers,
    updateCollection,
    updateMitra,
    updateSystemUser,
    getUsersByRole
  } = useSharedData();
  
  const [showAddProductModal, setShowAddProductModal] = useState(false);
  const [editingProduct, setEditingProduct] = useState<Product | null>(null);
  const [searchQuery, setSearchQuery] = useState('');
  const [filterRole, setFilterRole] = useState('all');
  const [newProduct, setNewProduct] = useState({
    name: '',
    category: 'Tech Waste',
    price: 0,
    credits: 0,
    image: '',
    description: '',
    highlight: '',
    rating: 4.5,
    inStock: true,
    specifications: {}
  });
  
  const allOrders = getAllOrders();
  const activeCollections = collections.filter(c => c.status === 'in-progress' || c.status === 'scheduled');
  const totalRevenue = allOrders.reduce((sum, order) => sum + order.totalPrice, 0);
  const totalWasteProcessed = wasteContributions.reduce((sum, contrib) => sum + contrib.weight, 0);

  const handleAddProduct = (e: React.FormEvent) => {
    e.preventDefault();
    addProduct(newProduct);
    setShowAddProductModal(false);
    setNewProduct({
      name: '',
      category: 'Tech Waste',
      price: 0,
      credits: 0,
      image: '',
      description: '',
      highlight: '',
      rating: 4.5,
      inStock: true,
      specifications: {}
    });
  };

  const handleEditProduct = (product: Product) => {
    setEditingProduct(product);
    setNewProduct({
      name: product.name,
      category: product.category,
      price: product.price,
      credits: product.credits,
      image: product.image,
      description: product.description,
      highlight: product.highlight,
      rating: product.rating,
      inStock: product.inStock,
      specifications: product.specifications || {}
    });
    setShowAddProductModal(true);
  };

  const handleUpdateProduct = (e: React.FormEvent) => {
    e.preventDefault();
    if (editingProduct) {
      updateProduct(editingProduct.id, newProduct);
      setShowAddProductModal(false);
      setEditingProduct(null);
      setNewProduct({
        name: '',
        category: 'Tech Waste',
        price: 0,
        credits: 0,
        image: '',
        description: '',
        highlight: '',
        rating: 4.5,
        inStock: true,
        specifications: {}
      });
    }
  };

  const generateOrdersCsv = (orders: any[]): string => {
    let csv = 'Order ID,Customer Name,Customer Email,Product,Category,Quantity,Payment Method,Amount,Status,Order Date,Shipping Address\n';
    
    orders.forEach(order => {
      order.items.forEach((item: any) => {
        const amount = item.paymentMethod === 'cash' ? 
          formatCurrency(item.product.price * item.quantity) :
          `${item.product.credits * item.quantity} credits`;
        
        const shippingAddress = `"${order.shippingAddress.address}, ${order.shippingAddress.city}, ${order.shippingAddress.state} - ${order.shippingAddress.pincode}"`;
        
        csv += `${order.id},"${order.shippingAddress.fullName}","${order.customerEmail}","${item.product.name}","${item.product.category}",${item.quantity},${item.paymentMethod},${amount},${order.status},${formatDate(order.createdAt)},${shippingAddress}\n`;
      });
    });
    
    return csv;
  };

  const generateSystemAnalyticsReport = (): string => {
    let content = `SYSTEM ANALYTICS REPORT\n\n`;
    content += `Report Date: ${formatDate(new Date())}\n`;
    content += `Report Period: ${new Date().toLocaleDateString('en-IN', { month: 'long', year: 'numeric' })}\n`;
    content += `Generated by: Admin Dashboard\n\n`;

    content += `SYSTEM OVERVIEW:\n`;
    content += `Total Users: ${systemUsers.length}\n`;
    content += `Active Users: ${systemUsers.filter(u => u.status === 'active').length}\n`;
    content += `Total Orders: ${allOrders.length}\n`;
    content += `Total Revenue: ${formatCurrency(totalRevenue)}\n`;
    content += `Total Waste Processed: ${totalWasteProcessed} kg\n`;
    content += `Total CO₂ Saved: ${wasteContributions.reduce((sum, c) => sum + c.co2Impact, 0).toFixed(2)} tons\n\n`;

    content += `USER BREAKDOWN BY ROLE:\n`;
    content += `Customers: ${getUsersByRole('customer').length}\n`;
    content += `Team Members: ${getUsersByRole('team').length}\n`;
    content += `Mitras: ${getUsersByRole('mitra').length}\n`;
    content += `Business Clients: ${getUsersByRole('business').length}\n`;
    content += `Administrators: ${getUsersByRole('admin').length}\n\n`;

    content += `BUSINESS METRICS:\n`;
    content += `Total Businesses: ${businesses.length}\n`;
    content += `Premium Subscriptions: ${businesses.filter(b => b.subscriptionTier === 'premium').length}\n`;
    content += `Enterprise Subscriptions: ${businesses.filter(b => b.subscriptionTier === 'enterprise').length}\n`;
    content += `Total GreenCredits Issued: ${businesses.reduce((sum, b) => sum + b.greenCredits, 0)}\n\n`;

    content += `COLLECTION OPERATIONS:\n`;
    content += `Total Collections: ${collections.length}\n`;
    content += `Active Collections: ${activeCollections.length}\n`;
    content += `Completed Collections: ${collections.filter(c => c.status === 'completed').length}\n`;
    content += `Total Earnings Paid: ${formatCurrency(collections.reduce((sum, c) => sum + c.earnings, 0))}\n\n`;

    content += `PRODUCT INVENTORY:\n`;
    content += `Total Products: ${products.length}\n`;
    content += `In Stock Products: ${products.filter(p => p.inStock).length}\n`;
    content += `Out of Stock Products: ${products.filter(p => !p.inStock).length}\n`;
    content += `Product Categories: ${Array.from(new Set(products.map(p => p.category))).length}\n\n`;

    content += `SYSTEM PERFORMANCE:\n`;
    content += `Order Fulfillment Rate: ${((allOrders.filter(o => o.status === 'delivered').length / allOrders.length) * 100).toFixed(1)}%\n`;
    content += `Average Mitra Efficiency: ${(mitras.reduce((sum, m) => sum + m.efficiency, 0) / mitras.length).toFixed(1)}%\n`;
    content += `System Uptime: 99.9%\n`;
    content += `Customer Satisfaction: 4.8/5\n\n`;

    return content;
  };

  const handleExportOrders = () => {
    const csvContent = generateOrdersCsv(allOrders);
    const filename = `ReForm_All_Orders_Report_${new Date().toISOString().split('T')[0]}.csv`;
    downloadFile(csvContent, filename, 'All Orders Report', 'text/csv');
  };

  const handleExportAnalytics = () => {
    const reportContent = generateSystemAnalyticsReport();
    const filename = `ReForm_System_Analytics_${new Date().toISOString().split('T')[0]}.txt`;
    downloadFile(reportContent, filename, 'System Analytics Report');
  };

  const filteredUsers = systemUsers.filter(user => {
    const matchesSearch = user.name.toLowerCase().includes(searchQuery.toLowerCase()) ||
                         user.email.toLowerCase().includes(searchQuery.toLowerCase());
    const matchesRole = filterRole === 'all' || user.role === filterRole;
    return matchesSearch && matchesRole;
  });

  const categories = ['Tech Waste', 'Waste Resources', 'Agri & Defense Waste', 'Retail Market Waste'];

  if (currentView === 'overview') {
    return (
      <div className="p-8">
        <div className="mb-8">
          <h1 className="text-3xl font-bold text-gray-900">Admin Dashboard</h1>
          <p className="text-gray-600">Complete system overview and management</p>
        </div>

        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
          <div className="bg-white p-6 rounded-xl shadow-sm border">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm text-gray-600">Total Users</p>
                <p className="text-2xl font-bold text-gray-900">{systemUsers.length}</p>
                <p className="text-sm text-green-600 flex items-center mt-1">
                  <TrendingUp className="h-4 w-4 mr-1" />
                  +12% this month
                </p>
              </div>
              <div className="bg-blue-100 p-3 rounded-lg">
                <Users className="h-6 w-6 text-blue-600" />
              </div>
            </div>
          </div>

          <div className="bg-white p-6 rounded-xl shadow-sm border">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm text-gray-600">Active Orders</p>
                <p className="text-2xl font-bold text-gray-900">{allOrders.filter(o => o.status !== 'delivered' && o.status !== 'cancelled').length}</p>
                <p className="text-sm text-orange-600">Pending processing</p>
              </div>
              <div className="bg-orange-100 p-3 rounded-lg">
                <ShoppingCart className="h-6 w-6 text-orange-600" />
              </div>
            </div>
          </div>

          <div className="bg-white p-6 rounded-xl shadow-sm border">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm text-gray-600">Collections Today</p>
                <p className="text-2xl font-bold text-gray-900">{collections.filter(c => c.date === new Date().toISOString().split('T')[0]).length}</p>
                <p className="text-sm text-green-600">{collections.filter(c => c.status === 'completed' && c.date === new Date().toISOString().split('T')[0]).length} completed</p>
              </div>
              <div className="bg-green-100 p-3 rounded-lg">
                <Truck className="h-6 w-6 text-green-600" />
              </div>
            </div>
          </div>

          <div className="bg-white p-6 rounded-xl shadow-sm border">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm text-gray-600">System Health</p>
                <p className="text-2xl font-bold text-gray-900">99.9%</p>
                <p className="text-sm text-green-600">All systems operational</p>
              </div>
              <div className="bg-green-100 p-3 rounded-lg">
                <CheckCircle className="h-6 w-6 text-green-600" />
              </div>
            </div>
          </div>
        </div>

        <div className="grid grid-cols-1 lg:grid-cols-3 gap-8 mb-8">
          <div className="bg-white p-6 rounded-xl shadow-sm border">
            <h3 className="text-lg font-semibold mb-4">User Distribution</h3>
            <div className="space-y-3">
              {[
                { role: 'Businesses', count: getUsersByRole('business').length, percentage: Math.round((getUsersByRole('business').length / systemUsers.length) * 100), color: 'bg-blue-500' },
                { role: 'Customers', count: getUsersByRole('customer').length, percentage: Math.round((getUsersByRole('customer').length / systemUsers.length) * 100), color: 'bg-purple-500' },
                { role: 'Mitras', count: getUsersByRole('mitra').length, percentage: Math.round((getUsersByRole('mitra').length / systemUsers.length) * 100), color: 'bg-green-500' },
                { role: 'Team Members', count: getUsersByRole('team').length, percentage: Math.round((getUsersByRole('team').length / systemUsers.length) * 100), color: 'bg-orange-500' },
                { role: 'Admins', count: getUsersByRole('admin').length, percentage: Math.round((getUsersByRole('admin').length / systemUsers.length) * 100), color: 'bg-gray-500' }
              ].map((user, index) => (
                <div key={index} className="flex items-center justify-between">
                  <div className="flex items-center">
                    <div className={`w-3 h-3 rounded-full mr-3 ${user.color}`}></div>
                    <span className="text-gray-700">{user.role}</span>
                  </div>
                  <div className="text-right">
                    <span className="font-medium text-gray-900">{user.count}</span>
                    <span className="text-sm text-gray-500 ml-1">({user.percentage}%)</span>
                  </div>
                </div>
              ))}
            </div>
          </div>

          <div className="bg-white p-6 rounded-xl shadow-sm border">
            <h3 className="text-lg font-semibold mb-4">Recent Activities</h3>
            <div className="space-y-4">
              {[
                { action: 'New business registered', user: businesses[businesses.length - 1]?.name || 'EcoTech Solutions', time: '2 min ago', type: 'success' },
                { action: 'Order completed', user: allOrders[0]?.shippingAddress.fullName || 'John Doe', time: '15 min ago', type: 'success' },
                { action: 'Collection logged', user: mitras[0]?.name || 'Raj Kumar', time: '1 hour ago', type: 'success' },
                { action: 'New product added', user: 'Team Portal', time: '2 hours ago', type: 'success' }
              ].map((activity, index) => (
                <div key={index} className="flex items-start">
                  <div className={`w-2 h-2 rounded-full mt-2 mr-3 ${
                    activity.type === 'success' ? 'bg-green-500' :
                    activity.type === 'warning' ? 'bg-yellow-500' :
                    'bg-red-500'
                  }`}></div>
                  <div className="flex-1">
                    <p className="text-sm text-gray-900">{activity.action}</p>
                    <p className="text-xs text-gray-600">{activity.user} • {activity.time}</p>
                  </div>
                </div>
              ))}
            </div>
          </div>

          <div className="bg-white p-6 rounded-xl shadow-sm border">
            <h3 className="text-lg font-semibold mb-4">System Health</h3>
            <div className="space-y-4">
              {[
                { metric: 'Server Uptime', value: '99.9%', status: 'excellent' },
                { metric: 'Database Performance', value: '98.2%', status: 'good' },
                { metric: 'API Response Time', value: '245ms', status: 'good' },
                { metric: 'Error Rate', value: '0.1%', status: 'excellent' }
              ].map((health, index) => (
                <div key={index} className="flex items-center justify-between">
                  <span className="text-gray-700">{health.metric}</span>
                  <div className="flex items-center">
                    <span className="font-medium text-gray-900 mr-2">{health.value}</span>
                    <div className={`w-2 h-2 rounded-full ${
                      health.status === 'excellent' ? 'bg-green-500' :
                      health.status === 'good' ? 'bg-yellow-500' :
                      'bg-red-500'
                    }`}></div>
                  </div>
                </div>
              ))}
            </div>
          </div>
        </div>

        <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
          <div className="bg-white p-6 rounded-xl shadow-sm border">
            <h3 className="text-lg font-semibold mb-4">Top Performing Mitras</h3>
            <div className="space-y-4">
              {mitras.slice(0, 4).map((mitra, index) => (
                <div key={index} className="flex items-center justify-between p-4 bg-gray-50 rounded-lg">
                  <div>
                    <p className="font-medium text-gray-900">{mitra.name}</p>
                    <p className="text-sm text-gray-600">{mitra.totalCollections} collections this month</p>
                  </div>
                  <div className="text-right">
                    <p className="text-sm font-medium text-gray-900">{mitra.efficiency}%</p>
                    <p className="text-xs text-gray-600">⭐ {mitra.rating}</p>
                  </div>
                </div>
              ))}
            </div>
          </div>

          <div className="bg-white p-6 rounded-xl shadow-sm border">
            <h3 className="text-lg font-semibold mb-4">Revenue Overview</h3>
            <div className="space-y-4">
              {[
                { period: 'Today', amount: `₹${Math.floor(totalRevenue * 0.05).toLocaleString()}`, change: '+8%', trend: 'up' },
                { period: 'This Week', amount: `₹${Math.floor(totalRevenue * 0.3).toLocaleString()}`, change: '+12%', trend: 'up' },
                { period: 'This Month', amount: `₹${totalRevenue.toLocaleString()}`, change: '+15%', trend: 'up' },
                { period: 'This Quarter', amount: `₹${Math.floor(totalRevenue * 2.8).toLocaleString()}`, change: '+18%', trend: 'up' }
              ].map((revenue, index) => (
                <div key={index} className="flex items-center justify-between p-4 bg-gray-50 rounded-lg">
                  <div>
                    <p className="font-medium text-gray-900">{revenue.period}</p>
                    <p className="text-xl font-bold text-gray-900">{revenue.amount}</p>
                  </div>
                  <div className="text-right">
                    <span className={`px-2 py-1 rounded-full text-xs font-medium ${
                      revenue.trend === 'up' ? 'bg-green-100 text-green-700' : 'bg-red-100 text-red-700'
                    }`}>
                      {revenue.change}
                    </span>
                  </div>
                </div>
              ))}
            </div>
          </div>
        </div>
      </div>
    );
  }

  if (currentView === 'orders') {
    return (
      <div className="p-8">
        <div className="mb-8 flex items-center justify-between">
          <div>
            <h1 className="text-3xl font-bold text-gray-900">All Orders Management</h1>
            <p className="text-gray-600">Monitor and manage all system orders</p>
          </div>
          <div className="flex space-x-3">
            <button 
              onClick={handleExportOrders}
              className="bg-blue-600 text-white px-4 py-2 rounded-lg font-medium hover:bg-blue-700 transition-colors flex items-center"
            >
              <FileText className="h-4 w-4 mr-2" />
              Export Report
            </button>
          </div>
        </div>

        <div className="grid grid-cols-1 md:grid-cols-4 gap-6 mb-8">
          <div className="bg-white p-4 rounded-xl shadow-sm border text-center">
            <p className="text-2xl font-bold text-blue-600">{allOrders.length}</p>
            <p className="text-sm text-gray-600">Total Orders</p>
          </div>
          <div className="bg-white p-4 rounded-xl shadow-sm border text-center">
            <p className="text-2xl font-bold text-green-600">{allOrders.filter(o => o.status === 'delivered').length}</p>
            <p className="text-sm text-gray-600">Completed</p>
          </div>
          <div className="bg-white p-4 rounded-xl shadow-sm border text-center">
            <p className="text-2xl font-bold text-orange-600">{allOrders.filter(o => o.status === 'processing').length}</p>
            <p className="text-sm text-gray-600">Processing</p>
          </div>
          <div className="bg-white p-4 rounded-xl shadow-sm border text-center">
            <p className="text-2xl font-bold text-red-600">{allOrders.filter(o => o.status === 'pending').length}</p>
            <p className="text-sm text-gray-600">Pending</p>
          </div>
        </div>

        <div className="bg-white rounded-xl shadow-sm border overflow-hidden">
          <div className="overflow-x-auto">
            <table className="w-full">
              <thead className="bg-gray-50">
                <tr>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Order ID</th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Customer</th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Product</th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Amount</th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Status</th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Date</th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
                </tr>
              </thead>
              <tbody className="bg-white divide-y divide-gray-200">
                {allOrders.map((order, index) => (
                  <tr key={index} className="hover:bg-gray-50">
                    <td className="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">{order.id}</td>
                    <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">{order.shippingAddress.fullName}</td>
                    <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">{order.items[0]?.product.name || 'Multiple Items'}</td>
                    <td className="px-6 py-4 whitespace-nowrap text-sm font-medium">
                      <span className={order.totalCredits > 0 ? 'text-amber-600' : 'text-gray-900'}>
                        {order.totalPrice > 0 ? `₹${order.totalPrice.toLocaleString()}` : `${order.totalCredits} credits`}
                      </span>
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap">
                      <select
                        value={order.status}
                        onChange={(e) => updateOrderStatus(order.id, e.target.value as any)}
                        className={`px-2 py-1 rounded-full text-xs font-medium border-0 ${
                          order.status === 'delivered' ? 'bg-green-100 text-green-700' :
                          order.status === 'shipped' ? 'bg-blue-100 text-blue-700' :
                          order.status === 'processing' ? 'bg-yellow-100 text-yellow-700' :
                          'bg-gray-100 text-gray-700'
                        }`}
                      >
                        <option value="pending">Pending</option>
                        <option value="processing">Processing</option>
                        <option value="shipped">Shipped</option>
                        <option value="delivered">Delivered</option>
                        <option value="cancelled">Cancelled</option>
                      </select>
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">{new Date(order.createdAt).toLocaleDateString()}</td>
                    <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                      <div className="flex space-x-2">
                        <button className="text-teal-600 hover:text-teal-700">
                          <Eye className="h-4 w-4" />
                        </button>
                        <button className="text-blue-600 hover:text-blue-700">
                          <Edit className="h-4 w-4" />
                        </button>
                      </div>
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        </div>
      </div>
    );
  }

  if (currentView === 'collections') {
    return (
      <div className="p-8">
        <div className="mb-8 flex items-center justify-between">
          <div>
            <h1 className="text-3xl font-bold text-gray-900">Collections Management</h1>
            <p className="text-gray-600">Monitor and manage all waste collections</p>
          </div>
        </div>

        <div className="grid grid-cols-1 md:grid-cols-4 gap-6 mb-8">
          <div className="bg-white p-4 rounded-xl shadow-sm border text-center">
            <p className="text-2xl font-bold text-blue-600">{collections.length}</p>
            <p className="text-sm text-gray-600">Total Collections</p>
          </div>
          <div className="bg-white p-4 rounded-xl shadow-sm border text-center">
            <p className="text-2xl font-bold text-green-600">{collections.filter(c => c.status === 'completed').length}</p>
            <p className="text-sm text-gray-600">Completed</p>
          </div>
          <div className="bg-white p-4 rounded-xl shadow-sm border text-center">
            <p className="text-2xl font-bold text-orange-600">{activeCollections.length}</p>
            <p className="text-sm text-gray-600">Active</p>
          </div>
          <div className="bg-white p-4 rounded-xl shadow-sm border text-center">
            <p className="text-2xl font-bold text-purple-600">{collections.reduce((sum, c) => sum + c.weight, 0)} kg</p>
            <p className="text-sm text-gray-600">Total Waste</p>
          </div>
        </div>

        <div className="bg-white rounded-xl shadow-sm border overflow-hidden">
          <div className="overflow-x-auto">
            <table className="w-full">
              <thead className="bg-gray-50">
                <tr>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Collection ID</th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Mitra</th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Business</th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Waste Type</th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Weight</th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Status</th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Date</th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Earnings</th>
                </tr>
              </thead>
              <tbody className="bg-white divide-y divide-gray-200">
                {collections.map((collection, index) => (
                  <tr key={index} className="hover:bg-gray-50">
                    <td className="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">{collection.id}</td>
                    <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">{collection.mitraName}</td>
                    <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">{collection.businessName}</td>
                    <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">{collection.wasteType}</td>
                    <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">{collection.weight} kg</td>
                    <td className="px-6 py-4 whitespace-nowrap">
                      <select
                        value={collection.status}
                        onChange={(e) => updateCollection(collection.id, { status: e.target.value as any })}
                        className={`px-2 py-1 rounded-full text-xs font-medium border-0 ${
                          collection.status === 'completed' ? 'bg-green-100 text-green-700' :
                          collection.status === 'in-progress' ? 'bg-blue-100 text-blue-700' :
                          collection.status === 'scheduled' ? 'bg-yellow-100 text-yellow-700' :
                          'bg-gray-100 text-gray-700'
                        }`}
                      >
                        <option value="scheduled">Scheduled</option>
                        <option value="in-progress">In Progress</option>
                        <option value="completed">Completed</option>
                        <option value="cancelled">Cancelled</option>
                      </select>
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">{collection.date}</td>
                    <td className="px-6 py-4 whitespace-nowrap text-sm font-medium text-green-600">₹{collection.earnings}</td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        </div>
      </div>
    );
  }

  if (currentView === 'products') {
    return (
      <div className="p-8">
        <div className="mb-8 flex items-center justify-between">
          <div>
            <h1 className="text-3xl font-bold text-gray-900">Product Management</h1>
            <p className="text-gray-600">Manage inventory and product catalog</p>
          </div>
          <button 
            onClick={() => setShowAddProductModal(true)}
            className="bg-green-600 text-white px-4 py-2 rounded-lg font-medium hover:bg-green-700 transition-colors flex items-center"
          >
            <Plus className="h-4 w-4 mr-2" />
            Add Product
          </button>
        </div>

        <div className="grid grid-cols-1 md:grid-cols-4 gap-6 mb-8">
          <div className="bg-white p-4 rounded-xl shadow-sm border text-center">
            <p className="text-2xl font-bold text-blue-600">{products.length}</p>
            <p className="text-sm text-gray-600">Total Products</p>
          </div>
          <div className="bg-white p-4 rounded-xl shadow-sm border text-center">
            <p className="text-2xl font-bold text-green-600">{products.filter(p => p.inStock).length}</p>
            <p className="text-sm text-gray-600">In Stock</p>
          </div>
          <div className="bg-white p-4 rounded-xl shadow-sm border text-center">
            <p className="text-2xl font-bold text-red-600">{products.filter(p => !p.inStock).length}</p>
            <p className="text-sm text-gray-600">Out of Stock</p>
          </div>
          <div className="bg-white p-4 rounded-xl shadow-sm border text-center">
            <p className="text-2xl font-bold text-purple-600">{categories.length}</p>
            <p className="text-sm text-gray-600">Categories</p>
          </div>
        </div>

        <div className="bg-white rounded-xl shadow-sm border overflow-hidden">
          <div className="overflow-x-auto">
            <table className="w-full">
              <thead className="bg-gray-50">
                <tr>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Product</th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Category</th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Price</th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Credits</th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Rating</th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Stock</th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
                </tr>
              </thead>
              <tbody className="bg-white divide-y divide-gray-200">
                {products.map((product, index) => (
                  <tr key={index} className="hover:bg-gray-50">
                    <td className="px-6 py-4 whitespace-nowrap">
                      <div className="flex items-center">
                        <img src={product.image} alt={product.name} className="w-10 h-10 rounded-lg object-cover mr-3" />
                        <div>
                          <p className="text-sm font-medium text-gray-900">{product.name}</p>
                          <p className="text-xs text-gray-500">{product.description.substring(0, 50)}...</p>
                        </div>
                      </div>
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">{product.category}</td>
                    <td className="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">₹{product.price.toLocaleString()}</td>
                    <td className="px-6 py-4 whitespace-nowrap text-sm text-amber-600">{product.credits}</td>
                    <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">⭐ {product.rating}</td>
                    <td className="px-6 py-4 whitespace-nowrap">
                      <span className={`px-2 py-1 rounded-full text-xs font-medium ${
                        product.inStock ? 'bg-green-100 text-green-700' : 'bg-red-100 text-red-700'
                      }`}>
                        {product.inStock ? 'In Stock' : 'Out of Stock'}
                      </span>
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                      <div className="flex space-x-2">
                        <button 
                          onClick={() => handleEditProduct(product)}
                          className="text-blue-600 hover:text-blue-700"
                        >
                          <Edit className="h-4 w-4" />
                        </button>
                        <button 
                          onClick={() => deleteProduct(product.id)}
                          className="text-red-600 hover:text-red-700"
                        >
                          <X className="h-4 w-4" />
                        </button>
                      </div>
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        </div>

        {/* Add/Edit Product Modal */}
        {showAddProductModal && (
          <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
            <div className="bg-white rounded-2xl max-w-2xl w-full max-h-[90vh] overflow-y-auto">
              <div className="sticky top-0 bg-white border-b px-6 py-4 flex items-center justify-between">
                <h2 className="text-xl font-bold text-gray-900">
                  {editingProduct ? 'Edit Product' : 'Add New Product'}
                </h2>
                <button
                  onClick={() => {
                    setShowAddProductModal(false);
                    setEditingProduct(null);
                  }}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <X className="h-6 w-6" />
                </button>
              </div>

              <form onSubmit={editingProduct ? handleUpdateProduct : handleAddProduct} className="p-6 space-y-4">
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">Product Name *</label>
                    <input
                      type="text"
                      required
                      value={newProduct.name}
                      onChange={(e) => setNewProduct({...newProduct, name: e.target.value})}
                      className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-transparent"
                      placeholder="Enter product name"
                    />
                  </div>

                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">Category *</label>
                    <select
                      required
                      value={newProduct.category}
                      onChange={(e) => setNewProduct({...newProduct, category: e.target.value})}
                      className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-transparent"
                    >
                      {categories.map(category => (
                        <option key={category} value={category}>{category}</option>
                      ))}
                    </select>
                  </div>
                </div>

                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">Price (₹) *</label>
                    <input
                      type="number"
                      required
                      min="0"
                      value={newProduct.price}
                      onChange={(e) => setNewProduct({...newProduct, price: Number(e.target.value)})}
                      className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-transparent"
                      placeholder="Enter price"
                    />
                  </div>

                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">Credits *</label>
                    <input
                      type="number"
                      required
                      min="0"
                      value={newProduct.credits}
                      onChange={(e) => setNewProduct({...newProduct, credits: Number(e.target.value)})}
                      className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-transparent"
                      placeholder="Enter credits"
                    />
                  </div>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">Image URL *</label>
                  <input
                    type="url"
                    required
                    value={newProduct.image}
                    onChange={(e) => setNewProduct({...newProduct, image: e.target.value})}
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-transparent"
                    placeholder="Enter image URL"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">Description *</label>
                  <textarea
                    required
                    rows={3}
                    value={newProduct.description}
                    onChange={(e) => setNewProduct({...newProduct, description: e.target.value})}
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-transparent"
                    placeholder="Enter product description"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">Highlight *</label>
                  <input
                    type="text"
                    required
                    value={newProduct.highlight}
                    onChange={(e) => setNewProduct({...newProduct, highlight: e.target.value})}
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-transparent"
                    placeholder="Enter product highlight"
                  />
                </div>

                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">Rating</label>
                    <input
                      type="number"
                      min="0"
                      max="5"
                      step="0.1"
                      value={newProduct.rating}
                      onChange={(e) => setNewProduct({...newProduct, rating: Number(e.target.value)})}
                      className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-transparent"
                    />
                  </div>

                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">Stock Status</label>
                    <select
                      value={newProduct.inStock.toString()}
                      onChange={(e) => setNewProduct({...newProduct, inStock: e.target.value === 'true'})}
                      className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-transparent"
                    >
                      <option value="true">In Stock</option>
                      <option value="false">Out of Stock</option>
                    </select>
                  </div>
                </div>

                <div className="flex gap-3 pt-4">
                  <button
                    type="button"
                    onClick={() => {
                      setShowAddProductModal(false);
                      setEditingProduct(null);
                    }}
                    className="flex-1 bg-gray-300 text-gray-700 py-3 rounded-lg font-semibold hover:bg-gray-400 transition-colors"
                  >
                    Cancel
                  </button>
                  <button
                    type="submit"
                    className="flex-1 bg-green-600 text-white py-3 rounded-lg font-semibold hover:bg-green-700 transition-colors"
                  >
                    {editingProduct ? 'Update Product' : 'Add Product'}
                  </button>
                </div>
              </form>
            </div>
          </div>
        )}
      </div>
    );
  }

  if (currentView === 'analytics') {
    return (
      <div className="p-8">
        <div className="mb-8 flex items-center justify-between">
          <div>
            <h1 className="text-3xl font-bold text-gray-900">System Analytics</h1>
            <p className="text-gray-600">Comprehensive system performance and metrics</p>
          </div>
          <button 
            onClick={handleExportAnalytics}
            className="bg-blue-600 text-white px-4 py-2 rounded-lg font-medium hover:bg-blue-700 transition-colors flex items-center"
          >
            <Download className="h-4 w-4 mr-2" />
            Export Analytics
          </button>
        </div>

        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
          <div className="bg-white p-6 rounded-xl shadow-sm border">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm text-gray-600">Total Revenue</p>
                <p className="text-2xl font-bold text-gray-900">₹{totalRevenue.toLocaleString()}</p>
                <p className="text-sm text-green-600">+18% this month</p>
              </div>
              <div className="bg-green-100 p-3 rounded-lg">
                <DollarSign className="h-6 w-6 text-green-600" />
              </div>
            </div>
          </div>

          <div className="bg-white p-6 rounded-xl shadow-sm border">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm text-gray-600">Waste Processed</p>
                <p className="text-2xl font-bold text-gray-900">{totalWasteProcessed} kg</p>
                <p className="text-sm text-blue-600">Total collected</p>
              </div>
              <div className="bg-blue-100 p-3 rounded-lg">
                <Package className="h-6 w-6 text-blue-600" />
              </div>
            </div>
          </div>

          <div className="bg-white p-6 rounded-xl shadow-sm border">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm text-gray-600">CO₂ Saved</p>
                <p className="text-2xl font-bold text-gray-900">{wasteContributions.reduce((sum, c) => sum + c.co2Impact, 0).toFixed(1)} tons</p>
                <p className="text-sm text-green-600">Environmental impact</p>
              </div>
              <div className="bg-green-100 p-3 rounded-lg">
                <Award className="h-6 w-6 text-green-600" />
              </div>
            </div>
          </div>

          <div className="bg-white p-6 rounded-xl shadow-sm border">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm text-gray-600">System Efficiency</p>
                <p className="text-2xl font-bold text-gray-900">96.5%</p>
                <p className="text-sm text-purple-600">Above target</p>
              </div>
              <div className="bg-purple-100 p-3 rounded-lg">
                <BarChart3 className="h-6 w-6 text-purple-600" />
              </div>
            </div>
          </div>
        </div>

        <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
          <div className="bg-white p-6 rounded-xl shadow-sm border">
            <h3 className="text-lg font-semibold mb-4">Monthly Performance</h3>
            <div className="space-y-4">
              {[
                { month: 'December', orders: allOrders.length, revenue: totalRevenue, growth: '+18%' },
                { month: 'November', orders: 132, revenue: Math.floor(totalRevenue * 0.85), growth: '+12%' },
                { month: 'October', orders: 118, revenue: Math.floor(totalRevenue * 0.72), growth: '+8%' },
                { month: 'September', orders: 109, revenue: Math.floor(totalRevenue * 0.65), growth: '+15%' }
              ].map((month, index) => (
                <div key={index} className="flex items-center justify-between p-4 bg-gray-50 rounded-lg">
                  <div>
                    <p className="font-medium text-gray-900">{month.month}</p>
                    <p className="text-sm text-gray-600">{month.orders} orders</p>
                  </div>
                  <div className="text-right">
                    <p className="font-medium text-gray-900">₹{month.revenue.toLocaleString()}</p>
                    <p className="text-sm text-green-600">{month.growth}</p>
                  </div>
                </div>
              ))}
            </div>
          </div>

          <div className="bg-white p-6 rounded-xl shadow-sm border">
            <h3 className="text-lg font-semibold mb-4">Waste Type Distribution</h3>
            <div className="space-y-4">
              {[
                { type: 'Electronic Waste', weight: wasteContributions.filter(w => w.wasteType === 'Electronic Waste').reduce((sum, w) => sum + w.weight, 0), percentage: 35 },
                { type: 'Plastic Waste', weight: wasteContributions.filter(w => w.wasteType === 'Plastic Waste').reduce((sum, w) => sum + w.weight, 0), percentage: 28 },
                { type: 'Paper & Cardboard', weight: wasteContributions.filter(w => w.wasteType === 'Paper & Cardboard').reduce((sum, w) => sum + w.weight, 0), percentage: 22 },
                { type: 'Metal Waste', weight: wasteContributions.filter(w => w.wasteType === 'Metal Waste').reduce((sum, w) => sum + w.weight, 0), percentage: 15 }
              ].map((waste, index) => (
                <div key={index} className="flex items-center justify-between p-4 bg-gray-50 rounded-lg">
                  <div>
                    <p className="font-medium text-gray-900">{waste.type}</p>
                    <p className="text-sm text-gray-600">{waste.weight} kg collected</p>
                  </div>
                  <div className="text-right">
                    <p className="font-medium text-gray-900">{waste.percentage}%</p>
                  </div>
                </div>
              ))}
            </div>
          </div>
        </div>
      </div>
    );
  }

  if (currentView === 'certifications') {
    return (
      <div className="p-8">
        <div className="mb-8 flex items-center justify-between">
          <div>
            <h1 className="text-3xl font-bold text-gray-900">User Management</h1>
            <p className="text-gray-600">Manage all system users and their permissions</p>
          </div>
        </div>

        <div className="mb-6 flex flex-col sm:flex-row gap-4">
          <div className="relative flex-1">
            <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-5 w-5" />
            <input
              type="text"
              placeholder="Search users..."
              value={searchQuery}
              onChange={(e) => setSearchQuery(e.target.value)}
              className="w-full pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
            />
          </div>
          <div className="relative">
            <Filter className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-5 w-5" />
            <select
              value={filterRole}
              onChange={(e) => setFilterRole(e.target.value)}
              className="pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent appearance-none bg-white"
            >
              <option value="all">All Roles</option>
              <option value="customer">Customers</option>
              <option value="team">Team Members</option>
              <option value="mitra">Mitras</option>
              <option value="business">Business Clients</option>
              <option value="admin">Administrators</option>
            </select>
          </div>
        </div>

        <div className="grid grid-cols-1 md:grid-cols-5 gap-6 mb-8">
          {['customer', 'team', 'mitra', 'business', 'admin'].map(role => (
            <div key={role} className="bg-white p-4 rounded-xl shadow-sm border text-center">
              <p className="text-2xl font-bold text-blue-600">{getUsersByRole(role).length}</p>
              <p className="text-sm text-gray-600 capitalize">{role}s</p>
            </div>
          ))}
        </div>

        <div className="bg-white rounded-xl shadow-sm border overflow-hidden">
          <div className="overflow-x-auto">
            <table className="w-full">
              <thead className="bg-gray-50">
                <tr>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">User</th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Role</th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Status</th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Joined</th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Last Login</th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Company</th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
                </tr>
              </thead>
              <tbody className="bg-white divide-y divide-gray-200">
                {filteredUsers.map((user, index) => (
                  <tr key={index} className="hover:bg-gray-50">
                    <td className="px-6 py-4 whitespace-nowrap">
                      <div>
                        <p className="text-sm font-medium text-gray-900">{user.name}</p>
                        <p className="text-xs text-gray-500">{user.email}</p>
                      </div>
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap">
                      <span className={`px-2 py-1 rounded-full text-xs font-medium ${
                        user.role === 'admin' ? 'bg-gray-100 text-gray-700' :
                        user.role === 'team' ? 'bg-blue-100 text-blue-700' :
                        user.role === 'business' ? 'bg-teal-100 text-teal-700' :
                        user.role === 'mitra' ? 'bg-green-100 text-green-700' :
                        'bg-purple-100 text-purple-700'
                      }`}>
                        {user.role}
                      </span>
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap">
                      <select
                        value={user.status}
                        onChange={(e) => updateSystemUser(user.id, { status: e.target.value as any })}
                        className={`px-2 py-1 rounded-full text-xs font-medium border-0 ${
                          user.status === 'active' ? 'bg-green-100 text-green-700' :
                          user.status === 'inactive' ? 'bg-yellow-100 text-yellow-700' :
                          'bg-red-100 text-red-700'
                        }`}
                      >
                        <option value="active">Active</option>
                        <option value="inactive">Inactive</option>
                        <option value="suspended">Suspended</option>
                      </select>
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">{user.joinedDate}</td>
                    <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">{user.lastLogin}</td>
                    <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">{user.company || '-'}</td>
                    <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                      <div className="flex space-x-2">
                        <button className="text-blue-600 hover:text-blue-700">
                          <Eye className="h-4 w-4" />
                        </button>
                        <button className="text-green-600 hover:text-green-700">
                          <Edit className="h-4 w-4" />
                        </button>
                      </div>
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="p-8">
      <h2 className="text-2xl font-bold text-gray-900">Admin {currentView}</h2>
      <p className="text-gray-600">This section is under development.</p>
    </div>
  );
}