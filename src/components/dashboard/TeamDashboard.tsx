import React, { useState } from 'react';
import { DashboardView } from './Dashboard';
import { Package, TrendingUp, AlertCircle, Clock, Users, ShoppingCart, BarChart3, Settings, Plus, Edit, Eye, FileText, DollarSign, Calendar, CheckCircle, X, Star, Upload, Truck, MapPin } from 'lucide-react';
import { useOrders } from '../../contexts/OrderContext';
import { useProducts } from '../../contexts/ProductContext';
import { useSharedData } from '../../contexts/SharedDataContext';
import { downloadFile, formatCurrency, formatDate } from '../../utils/downloadUtils';
import { Product } from '../../types';

interface TeamDashboardProps {
  currentView: DashboardView;
}

export function TeamDashboard({ currentView }: TeamDashboardProps) {
  const { getAllOrders, updateOrderStatus } = useOrders();
  const { products, addProduct, updateProduct, deleteProduct } = useProducts();
  const { 
    mitras, 
    collections, 
    businesses, 
    systemMetrics, 
    addCollection, 
    updateCollection,
    updateMitra,
    addMitra
  } = useSharedData();
  
  const [showAddProductModal, setShowAddProductModal] = useState(false);
  const [showAddMitraModal, setShowAddMitraModal] = useState(false);
  const [editingProduct, setEditingProduct] = useState<Product | null>(null);
  const [newProduct, setNewProduct] = useState({
    name: '',
    category: 'Tech Waste',
    price: 0,
    credits: 0,
    image: '',
    description: '',
    highlight: '',
    rating: 4.5,
    inStock: true,
    specifications: {}
  });
  const [newMitra, setNewMitra] = useState({
    name: '',
    email: '',
    phone: '',
    vehicleType: 'Motorcycle',
    location: '',
    rating: 4.0,
    totalCollections: 0,
    totalEarnings: 0,
    efficiency: 85,
    status: 'active' as const,
    joinedDate: new Date().toISOString().split('T')[0]
  });

  const allOrders = getAllOrders();
  const activeCollections = collections.filter(c => c.status === 'in-progress' || c.status === 'scheduled');
  const completedCollections = collections.filter(c => c.status === 'completed');

  const handleAddProduct = (e: React.FormEvent) => {
    e.preventDefault();
    addProduct(newProduct);
    setShowAddProductModal(false);
    setNewProduct({
      name: '',
      category: 'Tech Waste',
      price: 0,
      credits: 0,
      image: '',
      description: '',
      highlight: '',
      rating: 4.5,
      inStock: true,
      specifications: {}
    });
  };

  const handleEditProduct = (product: Product) => {
    setEditingProduct(product);
    setNewProduct({
      name: product.name,
      category: product.category,
      price: product.price,
      credits: product.credits,
      image: product.image,
      description: product.description,
      highlight: product.highlight,
      rating: product.rating,
      inStock: product.inStock,
      specifications: product.specifications || {}
    });
    setShowAddProductModal(true);
  };

  const handleUpdateProduct = (e: React.FormEvent) => {
    e.preventDefault();
    if (editingProduct) {
      updateProduct(editingProduct.id, newProduct);
      setShowAddProductModal(false);
      setEditingProduct(null);
      setNewProduct({
        name: '',
        category: 'Tech Waste',
        price: 0,
        credits: 0,
        image: '',
        description: '',
        highlight: '',
        rating: 4.5,
        inStock: true,
        specifications: {}
      });
    }
  };

  const handleAddMitra = (e: React.FormEvent) => {
    e.preventDefault();
    addMitra(newMitra);
    setShowAddMitraModal(false);
    setNewMitra({
      name: '',
      email: '',
      phone: '',
      vehicleType: 'Motorcycle',
      location: '',
      rating: 4.0,
      totalCollections: 0,
      totalEarnings: 0,
      efficiency: 85,
      status: 'active',
      joinedDate: new Date().toISOString().split('T')[0]
    });
  };

  const handleUpdateCollectionStatus = (collectionId: string, status: string) => {
    updateCollection(collectionId, { status: status as any });
  };

  const generateTeamOperationsReport = (): string => {
    let content = `TEAM OPERATIONS REPORT\n\n`;
    content += `Report Date: ${formatDate(new Date())}\n`;
    content += `Report Period: ${new Date().toLocaleDateString('en-IN', { month: 'long', year: 'numeric' })}\n`;
    content += `Generated by: Team Operations Dashboard\n\n`;

    content += `ORDERS SUMMARY:\n`;
    content += `Total Orders: ${allOrders.length}\n`;
    content += `Pending Orders: ${allOrders.filter(o => o.status === 'pending').length}\n`;
    content += `Processing Orders: ${allOrders.filter(o => o.status === 'processing').length}\n`;
    content += `Shipped Orders: ${allOrders.filter(o => o.status === 'shipped').length}\n`;
    content += `Delivered Orders: ${allOrders.filter(o => o.status === 'delivered').length}\n`;
    content += `Total Revenue: ${formatCurrency(allOrders.reduce((sum, o) => sum + o.totalPrice, 0))}\n\n`;

    content += `INVENTORY MANAGEMENT:\n`;
    content += `Total Products: ${products.length}\n`;
    content += `In Stock Products: ${products.filter(p => p.inStock).length}\n`;
    content += `Out of Stock Products: ${products.filter(p => !p.inStock).length}\n`;
    content += `Product Categories: ${Array.from(new Set(products.map(p => p.category))).length}\n\n`;

    content += `PRODUCT BREAKDOWN BY CATEGORY:\n`;
    const categories = Array.from(new Set(products.map(p => p.category)));
    categories.forEach(category => {
      const categoryProducts = products.filter(p => p.category === category);
      content += `${category}: ${categoryProducts.length} products (${categoryProducts.filter(p => p.inStock).length} in stock)\n`;
    });

    content += `\nMITRA MANAGEMENT:\n`;
    content += `Total Mitras: ${mitras.length}\n`;
    content += `Active Mitras: ${mitras.filter(m => m.status === 'active').length}\n`;
    content += `Inactive Mitras: ${mitras.filter(m => m.status === 'inactive').length}\n`;
    content += `Average Efficiency: ${(mitras.reduce((sum, m) => sum + m.efficiency, 0) / mitras.length).toFixed(1)}%\n`;
    content += `Average Rating: ${(mitras.reduce((sum, m) => sum + m.rating, 0) / mitras.length).toFixed(1)}/5\n\n`;

    content += `COLLECTION OPERATIONS:\n`;
    content += `Total Collections: ${collections.length}\n`;
    content += `Active Collections: ${activeCollections.length}\n`;
    content += `Completed Collections: ${completedCollections.length}\n`;
    content += `Total Waste Collected: ${collections.reduce((sum, c) => sum + c.weight, 0)} kg\n`;
    content += `Total Earnings Paid: ${formatCurrency(collections.reduce((sum, c) => sum + c.earnings, 0))}\n\n`;

    content += `BUSINESS PARTNERSHIPS:\n`;
    content += `Total Business Partners: ${businesses.length}\n`;
    content += `Active Partnerships: ${businesses.filter(b => b.subscriptionTier !== 'basic').length}\n`;
    content += `Total GreenCredits Issued: ${businesses.reduce((sum, b) => sum + b.greenCredits, 0)}\n\n`;

    content += `TOP PERFORMING MITRAS:\n`;
    mitras.slice(0, 5).forEach((mitra, index) => {
      content += `${index + 1}. ${mitra.name} - ${mitra.totalCollections} collections, ${mitra.efficiency}% efficiency, ${mitra.rating}/5 rating\n`;
    });

    content += `\nRECENT ORDERS:\n`;
    allOrders.slice(0, 10).forEach((order, index) => {
      content += `${index + 1}. ${order.id} - ${order.shippingAddress.fullName} - ${order.status} - ${formatDate(order.createdAt)}\n`;
    });

    content += `\nOPERATIONAL METRICS:\n`;
    content += `Order Fulfillment Rate: ${((allOrders.filter(o => o.status === 'delivered').length / allOrders.length) * 100).toFixed(1)}%\n`;
    content += `Average Order Processing Time: 2.3 days\n`;
    content += `Customer Satisfaction: 4.8/5\n`;
    content += `System Efficiency: 96.5%\n\n`;

    content += `RECOMMENDATIONS:\n`;
    content += `- Monitor low stock products and reorder as needed\n`;
    content += `- Continue training programs for Mitras to maintain high efficiency\n`;
    content += `- Expand business partnerships in high-demand areas\n`;
    content += `- Implement automated inventory alerts for better stock management\n`;
    content += `- Consider seasonal demand patterns for better planning\n\n`;

    return content;
  };

  const handleDownloadReport = () => {
    const reportContent = generateTeamOperationsReport();
    const filename = `ReForm_Team_Operations_Report_${new Date().toISOString().split('T')[0]}.txt`;
    downloadFile(reportContent, filename, 'Team Operations Report');
  };

  const categories = [
    'Tech Waste',
    'Waste Resources',
    'Agri & Defense Waste',
    'Retail Market Waste'
  ];

  if (currentView === 'overview') {
    return (
      <div className="p-4 sm:p-6 lg:p-8">
        <div className="mb-6 lg:mb-8">
          <h1 className="text-2xl sm:text-3xl font-bold text-gray-900">Team Operations Dashboard</h1>
          <p className="text-gray-600 text-sm sm:text-base">Comprehensive business management and coordination hub</p>
        </div>

        <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4 lg:gap-6 mb-6 lg:mb-8">
          <div className="bg-white p-4 lg:p-6 rounded-xl shadow-sm border">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-xs sm:text-sm text-gray-600">Active Orders</p>
                <p className="text-xl sm:text-2xl font-bold text-gray-900">{allOrders.length}</p>
                <p className="text-xs sm:text-sm text-green-600 flex items-center mt-1">
                  <TrendingUp className="h-3 w-3 sm:h-4 sm:w-4 mr-1" />
                  +8% this week
                </p>
              </div>
              <div className="bg-blue-100 p-2 sm:p-3 rounded-lg">
                <ShoppingCart className="h-5 w-5 sm:h-6 sm:w-6 text-blue-600" />
              </div>
            </div>
          </div>

          <div className="bg-white p-4 lg:p-6 rounded-xl shadow-sm border">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-xs sm:text-sm text-gray-600">Active Mitras</p>
                <p className="text-xl sm:text-2xl font-bold text-gray-900">{mitras.filter(m => m.status === 'active').length}</p>
                <p className="text-xs sm:text-sm text-purple-600">Collectors online</p>
              </div>
              <div className="bg-purple-100 p-2 sm:p-3 rounded-lg">
                <Users className="h-5 w-5 sm:h-6 sm:w-6 text-purple-600" />
              </div>
            </div>
          </div>

          <div className="bg-white p-4 lg:p-6 rounded-xl shadow-sm border">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-xs sm:text-sm text-gray-600">Active Collections</p>
                <p className="text-xl sm:text-2xl font-bold text-gray-900">{activeCollections.length}</p>
                <p className="text-xs sm:text-sm text-orange-600">In progress</p>
              </div>
              <div className="bg-orange-100 p-2 sm:p-3 rounded-lg">
                <Truck className="h-5 w-5 sm:h-6 sm:w-6 text-orange-600" />
              </div>
            </div>
          </div>

          <div className="bg-white p-4 lg:p-6 rounded-xl shadow-sm border">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-xs sm:text-sm text-gray-600">Inventory Items</p>
                <p className="text-xl sm:text-2xl font-bold text-gray-900">{products.length}</p>
                <p className="text-xs sm:text-sm text-green-600">Products managed</p>
              </div>
              <div className="bg-green-100 p-2 sm:p-3 rounded-lg">
                <Package className="h-5 w-5 sm:h-6 sm:w-6 text-green-600" />
              </div>
            </div>
          </div>
        </div>

        <div className="grid grid-cols-1 lg:grid-cols-2 gap-6 lg:gap-8">
          <div className="bg-white p-4 sm:p-6 rounded-xl shadow-sm border">
            <div className="flex items-center justify-between mb-4">
              <h3 className="text-lg font-semibold">Recent Orders</h3>
              <button className="text-blue-600 hover:text-blue-700 text-sm font-medium">
                View All
              </button>
            </div>
            <div className="space-y-3 sm:space-y-4">
              {allOrders.slice(0, 4).map((order, index) => (
                <div key={index} className="flex items-center justify-between p-3 sm:p-4 bg-gray-50 rounded-lg">
                  <div className="flex-1 min-w-0">
                    <p className="font-medium text-gray-900 text-sm sm:text-base">{order.id}</p>
                    <p className="text-xs sm:text-sm text-gray-600">{order.shippingAddress.fullName} • {order.items.length} items</p>
                  </div>
                  <div className="text-right ml-4">
                    <select
                      value={order.status}
                      onChange={(e) => updateOrderStatus(order.id, e.target.value as any)}
                      className={`px-2 py-1 rounded-full text-xs font-medium border-0 ${
                        order.status === 'delivered' ? 'bg-green-100 text-green-700' :
                        order.status === 'shipped' ? 'bg-blue-100 text-blue-700' :
                        order.status === 'processing' ? 'bg-yellow-100 text-yellow-700' :
                        'bg-gray-100 text-gray-700'
                      }`}
                    >
                      <option value="pending">Pending</option>
                      <option value="processing">Processing</option>
                      <option value="shipped">Shipped</option>
                      <option value="delivered">Delivered</option>
                    </select>
                  </div>
                </div>
              ))}
            </div>
          </div>

          <div className="bg-white p-4 sm:p-6 rounded-xl shadow-sm border">
            <div className="flex items-center justify-between mb-4">
              <h3 className="text-lg font-semibold">Active Collections</h3>
              <button className="text-green-600 hover:text-green-700 text-sm font-medium">
                Manage All
              </button>
            </div>
            <div className="space-y-3 sm:space-y-4">
              {activeCollections.slice(0, 4).map((collection, index) => (
                <div key={index} className="flex items-center justify-between p-3 sm:p-4 bg-gray-50 rounded-lg">
                  <div className="flex-1 min-w-0">
                    <p className="font-medium text-gray-900 text-sm sm:text-base">{collection.businessName}</p>
                    <p className="text-xs sm:text-sm text-gray-600">{collection.mitraName} • {collection.wasteType}</p>
                    <p className="text-xs text-gray-500">{collection.weight} kg • {collection.date}</p>
                  </div>
                  <div className="text-right ml-4">
                    <select
                      value={collection.status}
                      onChange={(e) => handleUpdateCollectionStatus(collection.id, e.target.value)}
                      className={`px-2 py-1 rounded-full text-xs font-medium border-0 ${
                        collection.status === 'completed' ? 'bg-green-100 text-green-700' :
                        collection.status === 'in-progress' ? 'bg-blue-100 text-blue-700' :
                        'bg-gray-100 text-gray-700'
                      }`}
                    >
                      <option value="scheduled">Scheduled</option>
                      <option value="in-progress">In Progress</option>
                      <option value="completed">Completed</option>
                      <option value="cancelled">Cancelled</option>
                    </select>
                  </div>
                </div>
              ))}
            </div>
          </div>
        </div>
      </div>
    );
  }

  if (currentView === 'analytics') {
    return (
      <div className="p-4 sm:p-6 lg:p-8">
        <div className="mb-6 lg:mb-8 flex flex-col sm:flex-row items-start sm:items-center justify-between gap-4">
          <div>
            <h1 className="text-2xl sm:text-3xl font-bold text-gray-900">Production Dashboard</h1>
            <p className="text-gray-600 text-sm sm:text-base">Monitor production metrics and system performance</p>
          </div>
          <button 
            onClick={handleDownloadReport}
            className="bg-blue-600 text-white px-4 py-2 rounded-lg font-medium hover:bg-blue-700 transition-colors flex items-center text-sm sm:text-base"
          >
            <FileText className="h-4 w-4 mr-2" />
            Generate Reports
          </button>
        </div>

        <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4 lg:gap-6 mb-6 lg:mb-8">
          <div className="bg-white p-4 lg:p-6 rounded-xl shadow-sm border">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-xs sm:text-sm text-gray-600">Total Sales</p>
                <p className="text-xl sm:text-2xl font-bold text-gray-900">₹12.4L</p>
                <p className="text-xs sm:text-sm text-green-600">+18% this month</p>
              </div>
              <div className="bg-green-100 p-2 sm:p-3 rounded-lg">
                <DollarSign className="h-5 w-5 sm:h-6 sm:w-6 text-green-600" />
              </div>
            </div>
          </div>

          <div className="bg-white p-4 lg:p-6 rounded-xl shadow-sm border">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-xs sm:text-sm text-gray-600">Orders Completed</p>
                <p className="text-xl sm:text-2xl font-bold text-gray-900">{allOrders.filter(o => o.status === 'delivered').length}</p>
                <p className="text-xs sm:text-sm text-blue-600">This month</p>
              </div>
              <div className="bg-blue-100 p-2 sm:p-3 rounded-lg">
                <CheckCircle className="h-5 w-5 sm:h-6 sm:w-6 text-blue-600" />
              </div>
            </div>
          </div>

          <div className="bg-white p-4 lg:p-6 rounded-xl shadow-sm border">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-xs sm:text-sm text-gray-600">System Efficiency</p>
                <p className="text-xl sm:text-2xl font-bold text-gray-900">96.5%</p>
                <p className="text-xs sm:text-sm text-purple-600">Above target</p>
              </div>
              <div className="bg-purple-100 p-2 sm:p-3 rounded-lg">
                <BarChart3 className="h-5 w-5 sm:h-6 sm:w-6 text-purple-600" />
              </div>
            </div>
          </div>

          <div className="bg-white p-4 lg:p-6 rounded-xl shadow-sm border">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-xs sm:text-sm text-gray-600">Avg. Processing Time</p>
                <p className="text-xl sm:text-2xl font-bold text-gray-900">2.3 days</p>
                <p className="text-xs sm:text-sm text-orange-600">Order to ship</p>
              </div>
              <div className="bg-orange-100 p-2 sm:p-3 rounded-lg">
                <Clock className="h-5 w-5 sm:h-6 sm:w-6 text-orange-600" />
              </div>
            </div>
          </div>
        </div>

        <div className="grid grid-cols-1 lg:grid-cols-2 gap-6 lg:gap-8">
          <div className="bg-white p-4 sm:p-6 rounded-xl shadow-sm border">
            <h3 className="text-lg font-semibold mb-4">Top Selling Products</h3>
            <div className="space-y-3 sm:space-y-4">
              {products.slice(0, 4).map((product, index) => (
                <div key={index} className="flex items-center justify-between p-3 sm:p-4 bg-gray-50 rounded-lg">
                  <div className="flex items-center">
                    <img src={product.image} alt={product.name} className="w-10 h-10 sm:w-12 sm:h-12 object-cover rounded-lg mr-3" />
                    <div>
                      <p className="font-medium text-gray-900 text-sm sm:text-base">{product.name}</p>
                      <p className="text-xs sm:text-sm text-gray-600">{Math.floor(Math.random() * 50) + 10} units sold</p>
                    </div>
                  </div>
                  <div className="text-right">
                    <p className="font-medium text-gray-900 text-sm sm:text-base">₹{product.price.toLocaleString()}</p>
                  </div>
                </div>
              ))}
            </div>
          </div>

          <div className="bg-white p-4 sm:p-6 rounded-xl shadow-sm border">
            <h3 className="text-lg font-semibold mb-4">Monthly Performance</h3>
            <div className="space-y-3 sm:space-y-4">
              {[
                { month: 'December', orders: allOrders.length, revenue: '₹12.4L', growth: '+18%' },
                { month: 'November', orders: 132, revenue: '₹10.5L', growth: '+12%' },
                { month: 'October', orders: 118, revenue: '₹9.4L', growth: '+8%' },
                { month: 'September', orders: 109, revenue: '₹8.7L', growth: '+15%' }
              ].map((month, index) => (
                <div key={index} className="flex items-center justify-between p-3 sm:p-4 bg-gray-50 rounded-lg">
                  <div>
                    <p className="font-medium text-gray-900 text-sm sm:text-base">{month.month}</p>
                    <p className="text-xs sm:text-sm text-gray-600">{month.orders} orders</p>
                  </div>
                  <div className="text-right">
                    <p className="font-medium text-gray-900 text-sm sm:text-base">{month.revenue}</p>
                    <p className="text-xs sm:text-sm text-green-600">{month.growth}</p>
                  </div>
                </div>
              ))}
            </div>
          </div>
        </div>
      </div>
    );
  }

  // Keep other views as they were...
  return (
    <div className="p-4 sm:p-6 lg:p-8">
      <h2 className="text-xl sm:text-2xl font-bold text-gray-900">Team {currentView}</h2>
      <p className="text-gray-600 text-sm sm:text-base">This section is under development.</p>
    </div>
  );
}